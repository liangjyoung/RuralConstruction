(function (a, c) {
	var count  = 0;
	var b = function (e, d) {
		this.$element = a(e);
		this.options = a.extend({}, a.fn.tree.defaults, d);
		this.$element.on("click", ".tree-item", a.proxy(function (f) {
				this.selectItem(f.currentTarget)
			}, this));
		this.$element.on("click", ".tree-folder-header", a.proxy(function (f) {
				this.selectFolder(f.currentTarget)
			}, this));
		this.$element.on("click", ".tree-folder-name", a.proxy(function (f) {
			this.selectFoldername(f.currentTarget)
		}, this));
		this.render()
	};
	b.prototype = {
		constructor: b,
		render: function () {
			//alert("ss");
			this.populate(this.$element)
		},
		populate: function (f) {
			var e = this;
			var flag =true;
			var test = true;
			var d = f.parent().find(".tree-loader:eq(0)");
		//	alert(JSON.stringify(f));
			d.show();
			
			this.options.dataSource.data(f.data(), function (g) {
				d.hide();
				a.each(g.data, function (h, j) {
					var i;
					if (j.type === "folder") {
						i = e.$element.find(".tree-folder:eq(0)").clone().show();
						
						//alert(JSON.stringify(i));
						i.find(".tree-folder-name").html(j.name);
						i.find(".tree-loader").html(e.options.loadingHTML);
						///alert(ssss);
						var k = i.find(".tree-folder-header");
						k.data(j);
						if ("icon-class" in j) {
							k.find('[class*="icon-"]').addClass(j["icon-class"])
						}
						//alert(JSON.stringify(j));
						
					} else {
						if (j.type === "item") {
							i = e.$element.find(".tree-item:eq(0)").clone().show();
				
							//alert(JSON.stringify(i));
							i.find(".tree-item-name").html(j.name);
							i.data(j);
							if ("additionalParameters" in j && "item-selected" in j.additionalParameters && j.additionalParameters["item-selected"] == true) {
								i.addClass("tree-selected");
								i.find("i").removeClass(e.options["unselected-icon"]).addClass(e.options["selected-icon"])
								if(test == true){
									setTimeout(function(){i.trigger('selected')}, 500);
									test = false;
								}
							}
						}
					}
					if (f.hasClass("tree-folder-header")) {
						//alert(count);
						//alert(JSON.stringify(f));
						if(count!=0){
							if(f.children().hasClass("icon-ok")){
							i.addClass("tree-selected");
							i.find("i").addClass(e.options["selected-icon"])
							}
								
						}
						f.parent().find(".tree-folder-content:eq(0)").append(i)
					//alert(i);
						//i.find(".tree-item-name").html(j.name);
					//	i.addClass("tree-selected");
					//	i.find("i").removeClass(e.options["unselected-icon"]).addClass(e.options["selected-icon"])
					} else {
						f.append(i)
					}
				});
				e.$element.trigger("loaded")
			})
		},
		
		selectItem: function (e) {
			if (this.options.selectable == false) {
				return
			}
			var d = a(e);
			var m = d.parent();//tree-folder-content
			var t = m.siblings('.tree-folder-header').find('.tree-folder-name');
			var p = m.parent().find(".tree-folder-content");
			var g = this.$element.find(".tree-selected");
			//alert(JSON.stringify(this.$element.parent().parent().find('.tree-folder-header').find('icon-ok')));
			//alert(JSON.stringify(d));
			var f = [];
			if (this.options.multiSelect) {
				a.each(g, function (i, j) {
					var h = a(j);
					if (h[0] !== d[0]) {
						f.push(a(j).data())
					}
				})
			} else {
					//alert("sa");
				if (g[0] !== d[0]) {
					g.removeClass("tree-selected").find("i").removeClass(this.options["selected-icon"]).addClass(this.options["unselected-icon"]);
					f.push(d.data())
				
				}
			}
			if (d.hasClass("tree-selected")) {
					
					//alert(JSON.stringify(p));
					//alert(d.parent().parent().find(".tree-folder-content").children().children().siblings('.icon-ok').length );
					if(d.parent().parent().find(".tree-folder-content").children().children().siblings('.icon-ok').length-1 <=0){
						
					 t.siblings('.icon-ok').remove();
					}
					d.removeClass("tree-selected");
					d.find("i").removeClass(this.options["selected-icon"]).addClass(this.options["unselected-icon"])
				
				//d.addClass("tree-selected");
				//d.find("i").removeClass(this.options["unselected-icon"]).addClass(this.options["selected-icon"]);
			} else {
				//alert("ss");
				d.addClass("tree-selected");
				if(!d.parent().parent().find('.tree-folder-header').children().siblings('.icon-ok').length > 0)
				{
							
						
					t.before('<i class="icon-ok" style="text-align: center;border: 1px solid #CCC;border-radius:3px;box-shadow: 0 1px 2px rgba(0,0,0,0.05);    background-color: #f9a021;border-color: #f9a021;color: #FFF;"></i>');
					var e=arguments.callee.caller.arguments[0]||event;
					
				}
				d.find("i").removeClass(this.options["unselected-icon"]).addClass(this.options["selected-icon"]);
				if (this.options.multiSelect) {
					f.push(d.data())
				}
			}
			if (f.length) {
				this.$element.trigger("selected", {
					info: f
				})
			}
		},
		selectFolder: function (e) {
			//alert("aa");
			var d = a(e);//tree-folder-header
			var f = d.parent();//tree-folder
	
			if (d.find("." + this.options["close-icon"]).length) {
				if (f.find(".tree-folder-content").children().length) {
					
					f.find(".tree-folder-content:eq(0)").show();
					count++;
				} else {
					//count=0;
					this.populate(d)
				}
				f.find("." + this.options["close-icon"] + ":eq(0)").removeClass(this.options["close-icon"]).addClass(this.options["open-icon"]);
				//this.$element.trigger("opened", d.data())
			} else {
				count--;
				if (this.options.cacheItems) { 
					f.find(".tree-folder-content:eq(0)").hide()
				} else {
					f.find(".tree-folder-content:eq(0)").empty()
				}
				f.find("." + this.options["open-icon"] + ":eq(0)").removeClass(this.options["open-icon"]).addClass(this.options["close-icon"]);
			}
		},
		
		
	
		selectFoldername: function (e) {
			//alert("sss");
			var d = a(e);
			var f = d.parent();
			var q = f.parent();
			//var i = q.find(".tree-folder:eq(0)").clone().show();
			//alert(i.length);
			/*if (f.hasClass("tree-folder-header")) {
					f.parent().find(".tree-folder-content:eq(0)").append(i)
						//i.find(".tree-item-name").html(j.name);
						alert(11);
						i.addClass("tree-selected");
						i.find("i").removeClass(e.options["unselected-icon"]).addClass(e.options["selected-icon"])
					} else {
						f.append(i)
					}*/
			//var g = f.parent(); 
			var s = d.parent('.tree-folder-header').siblings('.tree-folder-content').find('.tree-item');
				var m = a(s);
				//alert(s.length);
			//m.addClass("tree-selected");
			//m.find("m").removeClass(e.options["unselected-icon"]).addClass(e.options["selected-icon"])
			//alert(JSON.stringify(s));
			//var m = this.$element.find(".tree-selected");
			//count++;
				//alert(count);
					//this.populate(d)
			if (d.siblings('.icon-ok').length > 0) {
				 	count--;
				 d.siblings('.icon-ok').remove();	
				for(var i = 0; i<s.length;i++){
				
				m.removeClass('tree-selected');
				m.find("i").removeClass(this.options["selected-icon"]);
			}
			} else {
				count++;
				 d.before('<i class="icon-ok" style="text-align: center;border: 1px solid #CCC;border-radius:3px;box-shadow: 0 1px 2px rgba(0,0,0,0.05);    background-color: #f9a021;border-color: #f9a021;color: #FFF;"></i>');
				this.$element.trigger("opened", f.data());
				for(var i = 0; i<s.length;i++){
					m.addClass('tree-selected');
					m.find("i").addClass(this.options["selected-icon"]);
				}
			
			}
		 
			
			},
		
		
		selectedItems: function () {
			var e = this.$element.find(".tree-selected");
			var d = [];
			a.each(e, function (f, g) {
				d.push(a(g).data())
			});
			return d
		}
	};
	
	
	a.fn.tree = function (e, g) {
		var f;
		var d = this.each(function () {
				var j = a(this);
				var i = j.data("tree");
				var h = typeof e === "object" && e;
				if (!i) {
					j.data("tree", (i = new b(this, h)))
				}
				if (typeof e === "string") {
					f = i[e](g)
				}
			});
		return (f === c) ? d : f
	};
	a.fn.tree.defaults = {
		multiSelect: false,
		loadingHTML: "<div>Loading...</div>",
		cacheItems: true
	};
	a.fn.tree.Constructor = b
})(window.jQuery);
